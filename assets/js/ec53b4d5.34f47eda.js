"use strict";(self.webpackChunkls_guide=self.webpackChunkls_guide||[]).push([[152],{8106:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"Guides/bestsettings","title":"Best Settings & Tips","description":"Guide for achieving optimum settings","source":"@site/docs/Guides/3. Best Settings & Tips.md","sourceDirName":"Guides","slug":"/Guides/bestsettings","permalink":"/docs/Guides/bestsettings","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Best Settings & Tips","description":"Guide for achieving optimum settings","id":"bestsettings"},"sidebar":"docs","previous":{"title":"LS settings Info","permalink":"/docs/Guides/LS settings Info"},"next":{"title":"Cap base fps with RTSS","permalink":"/docs/Guides/rtss"}}');var n=i(4848),r=i(8453);const o={title:"Best Settings & Tips",description:"Guide for achieving optimum settings",id:"bestsettings"},a=void 0,l={},d=[{value:"Due to varying hardware and other variables, there is no &#39;best&#39; setting per se. However, keep these points in mind for better results :",id:"due-to-varying-hardware-and-other-variables-there-is-no-best-setting-per-se-however-keep-these-points-in-mind-for-better-results-",level:3},{value:"Use these for reference, try different settings yourself.",id:"use-these-for-reference-try-different-settings-yourself",level:3}];function c(e){const t={blockquote:"blockquote",em:"em",h3:"h3",li:"li",ol:"ol",ul:"ul",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(t.blockquote,{children:["\n",(0,n.jsxs)(t.blockquote,{children:["\n",(0,n.jsx)(t.h3,{id:"due-to-varying-hardware-and-other-variables-there-is-no-best-setting-per-se-however-keep-these-points-in-mind-for-better-results-",children:"Due to varying hardware and other variables, there is no 'best' setting per se. However, keep these points in mind for better results :"}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsx)(t.li,{children:"Avoid maxing out GPU usage (keep it below 95%); either lower your graphics settings or limit your FPS. For example, if you get around 47-50 (or 67-70) base FPS without LSFG, then cap it at 40 (or 60) FPS before scaling."}),"\n",(0,n.jsx)(t.li,{children:"Flow Scale: 1080p - 80-100; 1440p - 65-75; 2160p - 40-50"}),"\n",(0,n.jsx)(t.li,{children:"Base FPS: Minimum - 40 FPS; Recommended - 60+ FPS"}),"\n",(0,n.jsx)(t.li,{children:"If you are struggling to get a stable base FPS, lower the in-game resolution, run in windowed/borderless mode, and use scaling + FG."}),"\n",(0,n.jsx)(t.li,{children:"Use RTSS (with Reflex Frame Limiter) for base FPS capping."}),"\n",(0,n.jsx)(t.li,{children:"Avoid lowering the queue target and max frame latency (ideally 2-5) too much, as they can easily mess up frame pacing. MFL to 10 has lower latency, but has chances of crashes in some cases."}),"\n",(0,n.jsx)(t.li,{children:"Adaptive and fixed decimal FG multipliers are heavier, but Adaptive offers better frame pacing. Use them if you have a little GPU headroom left; otherwise, prefer fixed integer multipliers."}),"\n",(0,n.jsxs)(t.li,{children:["DXGI is better if you have a low-end PC or are aiming for the lowest latency. WGC (only on Windows 11 24H2) is better for overlay handling, screenshots, etc. (",(0,n.jsx)(t.em,{children:"Note: WGC is only slightly better, has higher usage than DXGI, and is the preferred option."}),")"]}),"\n",(0,n.jsx)(t.li,{children:"It's better to turn off in-game V-Sync. Instead, use either the default sync mode in LS or V-Sync via NVCP/Adrenaline (with it disabled in LS). Also, adjust VRR (and its adequate FPS range) and G-Sync support in LS."}),"\n",(0,n.jsx)(t.li,{children:"Be mindful of overlays, even if they aren't visible. If the LS fps counter is showing way higher base fps than the actual value of the game, it is an overlay interfering. Disable Discord overlay, Nvidia, AMD, custom crosshairs, wallpaper engines/animated wallpapers, third party recording software, etc."}),"\n",(0,n.jsxs)(t.li,{children:["Disable Hardware Acceleration Settings (Do this only if there is some issue when these are on) :","\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"In windows settings, search Hardware Accelerated GPU Scheduling."}),"\n",(0,n.jsx)(t.li,{children:"In browser settings, search Hardware Acceleration."}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(t.li,{children:"To reduce ghosting: use a higher base FPS, lower fixed multipliers (avoid adaptive FG), and a higher flow scale."}),"\n",(0,n.jsx)(t.li,{children:"For Nvidia cards, if the GPU is not reaching proper 3D clock speeds, and GPU utilization drops, Open the Nvidia Control Panel (NVCP) -> Manage 3D settings -> Global -> Power Management -> set to Max Performance."}),"\n",(0,n.jsx)(t.li,{children:"Disable ULPS in Afterburner for AMD cards (optional, for specific cases only)."}),"\n",(0,n.jsxs)(t.li,{children:["For different game engines, there might be some wierd issues :","\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"For open GL games and Nvidia card, in NVCP, set the present method for the particular game to DXGI swapchain."}),"\n",(0,n.jsx)(t.li,{children:"For unity engine  games, emulators and for the games having the Tick Per Second (TPS) getting reduced -in other words, it starts workign in Slowmotion, then disable the Vsync setting in the game/emulator."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(t.blockquote,{children:["\n",(0,n.jsx)(t.h3,{id:"use-these-for-reference-try-different-settings-yourself",children:"Use these for reference, try different settings yourself."}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},8453:(e,t,i)=>{i.d(t,{R:()=>o,x:()=>a});var s=i(6540);const n={},r=s.createContext(n);function o(e){const t=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:o(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);