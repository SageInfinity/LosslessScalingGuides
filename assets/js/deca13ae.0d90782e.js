"use strict";(self.webpackChunkls_guide=self.webpackChunkls_guide||[]).push([[812],{4316:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"Guides/bestsettings","title":"Best Settings for LS","description":"Guide for achieving optimum settings","source":"@site/docs/Guides/3. Best Settings.md","sourceDirName":"Guides","slug":"/Guides/bestsettings","permalink":"/docs/Guides/bestsettings","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Best Settings for LS","description":"Guide for achieving optimum settings","id":"bestsettings"},"sidebar":"docs","previous":{"title":"LS settings Info","permalink":"/docs/Guides/LS settings Info"},"next":{"title":"Cap base fps with RTSS","permalink":"/docs/Guides/rtss"}}');var n=s(4848),r=s(8453);const o={title:"Best Settings for LS",description:"Guide for achieving optimum settings",id:"bestsettings"},a=void 0,l={},d=[{value:"Due to varying hardware and other variables, there is no &#39;best&#39; setting per se. However, keep these points in mind for better results :",id:"due-to-varying-hardware-and-other-variables-there-is-no-best-setting-per-se-however-keep-these-points-in-mind-for-better-results-",level:3},{value:"Use these for reference, try different settings yourself.",id:"use-these-for-reference-try-different-settings-yourself",level:3}];function c(e){const t={blockquote:"blockquote",em:"em",h3:"h3",li:"li",ol:"ol",p:"p",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(t.blockquote,{children:["\n",(0,n.jsxs)(t.blockquote,{children:["\n",(0,n.jsx)(t.h3,{id:"due-to-varying-hardware-and-other-variables-there-is-no-best-setting-per-se-however-keep-these-points-in-mind-for-better-results-",children:"Due to varying hardware and other variables, there is no 'best' setting per se. However, keep these points in mind for better results :"}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsx)(t.li,{children:"Avoid maxing out GPU usage (keep it below 95%); either lower your graphics settings or limit your FPS. For example, if you get around 47-50 (or 67-70) base FPS without LSFG, then cap it at 40 (or 60) FPS before scaling."}),"\n",(0,n.jsx)(t.li,{children:"Flow Scale: 1080p - 80-100; 1440p - 65-75; 2160p - 40-50"}),"\n",(0,n.jsx)(t.li,{children:"Base FPS: Minimum - 40 FPS; Recommended - 60+ FPS"}),"\n",(0,n.jsx)(t.li,{children:"If you are struggling to get a stable base FPS, lower the in-game resolution, run in windowed/borderless mode, and use scaling + FG."}),"\n",(0,n.jsx)(t.li,{children:"Use RTSS (with Reflex Frame Limiter) for base FPS capping."}),"\n",(0,n.jsx)(t.li,{children:"Avoid lowering the queue target and max frame latency (ideally 2-5) too much, as they can easily mess up frame pacing. MFL to 10 has lower latency, but has chances of crashes in some cases."}),"\n",(0,n.jsx)(t.li,{children:"Adaptive and fixed decimal FG multipliers are heavier, but Adaptive offers better frame pacing. Use them if you have a little GPU headroom left; otherwise, prefer fixed integer multipliers."}),"\n",(0,n.jsxs)(t.li,{children:["DXGI is better if you have a low-end PC or are aiming for the lowest latency. WGC (only on Windows 11 24H2) is better for overlay handling, screenshots, etc. (",(0,n.jsx)(t.em,{children:"Note: WGC is only slightly better, has higher usage than DXGI, and is the preferred option."}),")"]}),"\n",(0,n.jsx)(t.li,{children:"It's better to turn off in-game V-Sync. Instead, use either the default sync mode in LS or V-Sync via NVCP/Adrenaline (with it disabled in LS). Also, adjust VRR (and its adequate FPS range) and G-Sync support in LS."}),"\n",(0,n.jsx)(t.li,{children:"Be mindful of overlays, even if they aren't visible."}),"\n",(0,n.jsx)(t.li,{children:"Disable Hardware Acceleration."}),"\n",(0,n.jsx)(t.li,{children:"To reduce ghosting: use a higher base FPS, lower fixed multipliers (avoid adaptive FG), and a higher flow scale."}),"\n",(0,n.jsx)(t.li,{children:"Disable Hyper-V/Core Isolation (optional; For very specific cases only)."}),"\n",(0,n.jsx)(t.li,{children:"Disable ULPS in Afterburner for AMD cards (optional, for specific cases only)."}),"\n"]}),"\n",(0,n.jsxs)(t.blockquote,{children:["\n",(0,n.jsx)(t.h3,{id:"use-these-for-reference-try-different-settings-yourself",children:"Use these for reference, try different settings yourself."}),"\n"]}),"\n",(0,n.jsxs)(t.blockquote,{children:["\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.em,{children:"by- Sage"})}),"\n"]})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>o,x:()=>a});var i=s(6540);const n={},r=i.createContext(n);function o(e){const t=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:o(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);